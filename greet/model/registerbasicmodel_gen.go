// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	registerBasicFieldNames          = builder.RawFieldNames(&RegisterBasic{})
	registerBasicRows                = strings.Join(registerBasicFieldNames, ",")
	registerBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(registerBasicFieldNames, "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	registerBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(registerBasicFieldNames, "`name`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	registerBasicModel interface {
		Insert(ctx context.Context, data *RegisterBasic) (sql.Result, error)
		FindOne(ctx context.Context, name string) (*RegisterBasic, error)
		Update(ctx context.Context, data *RegisterBasic) error
		Delete(ctx context.Context, name string) error
	}

	defaultRegisterBasicModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RegisterBasic struct {
		Name     string         `db:"name"`
		Password sql.NullString `db:"password"`
		Age      sql.NullInt64  `db:"age"`
	}
)

func newRegisterBasicModel(conn sqlx.SqlConn) *defaultRegisterBasicModel {
	return &defaultRegisterBasicModel{
		conn:  conn,
		table: "`register_basic`",
	}
}

func (m *defaultRegisterBasicModel) Delete(ctx context.Context, name string) error {
	query := fmt.Sprintf("delete from %s where `name` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, name)
	return err
}

func (m *defaultRegisterBasicModel) FindOne(ctx context.Context, name string) (*RegisterBasic, error) {
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", registerBasicRows, m.table)
	var resp RegisterBasic
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRegisterBasicModel) Insert(ctx context.Context, data *RegisterBasic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, registerBasicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Password, data.Age)
	return ret, err
}

func (m *defaultRegisterBasicModel) Update(ctx context.Context, data *RegisterBasic) error {
	query := fmt.Sprintf("update %s set %s where `name` = ?", m.table, registerBasicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Password, data.Age, data.Name)
	return err
}

func (m *defaultRegisterBasicModel) tableName() string {
	return m.table
}
