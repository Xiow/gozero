// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/go-redis/redis/v9"
	"gorm.io/gorm"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loginBasicFieldNames          = builder.RawFieldNames(&LoginBasic{})
	loginBasicRows                = strings.Join(loginBasicFieldNames, ",")
	loginBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(loginBasicFieldNames, "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	loginBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(loginBasicFieldNames, "`name`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	loginBasicModel interface {
		Insert( ctx context.Context, data *LoginBasic) (sql.Result, error)
		FindOne(ctx context.Context, name string) (*LoginBasic, error)
		Update(ctx context.Context, data *LoginBasic) error
		Delete(ctx context.Context, name string) error
	}

	defaultLoginBasicModel struct {
		conn  sqlx.SqlConn
		table string
	}
	defaultRedisBasicModel struct {
		conn *redis.Client
	}
	defaultGormBasicModel struct {
		conn *gorm.DB
	}
	LoginBasic struct {
		Name     string         `db:"name"`
		Password string `db:"password"`
	}
)

func newLoginBasicModel(conn sqlx.SqlConn) *defaultLoginBasicModel {
	return &defaultLoginBasicModel{
		conn:  conn,
		table: "`login_basic`",
	}
}


func (m *defaultLoginBasicModel) Delete(ctx context.Context, name string) error {
	query := fmt.Sprintf("delete from %s where `name` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, name)
	return err
}

func (m *defaultLoginBasicModel) FindOne(ctx context.Context, name string) (*LoginBasic, error) {
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", loginBasicRows, m.table)
	var resp LoginBasic
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginBasicModel) Insert(ctx context.Context, data *LoginBasic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, loginBasicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Password)
	return ret, err
}

func (m *defaultLoginBasicModel) Update(ctx context.Context, data *LoginBasic) error {
	query := fmt.Sprintf("update %s set %s where `name` = ?", m.table, loginBasicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Password, data.Name)
	return err
}

func (m *defaultLoginBasicModel) tableName() string {
	return m.table
}
